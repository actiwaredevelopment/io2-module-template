name: 'Release Build (Auto)'

on:
    push:
        tags:
            - 'release-*'
    workflow_dispatch:
        inputs:
            release:
                description: 'The release version'
                required: true
                type: string
                default: ''

jobs:
    settings:
        name: 'Prepare Workflow'
        runs-on: ubuntu-latest

        outputs:
            DOTNET_VERSION: 8.0.x
            PROJECT_FILE: src/service-v2-dotnet/service/io2-module-iotemplate-service.csproj
            UI_BUILD_PATH: ./src/configuration/build
            MODULE_FILE: IOTemplate.zip
            DOCKER_FILE: ./.github/docker/dockerfile
            DOCKER_IMAGE: actiwareio/io-module-iotemplate
            SETUP_PROJECT: src/setup/setup-module-dotnet.aip
            SERVICE_NAME: IOTemplateService
            S3_TARGET: 'Modules/IOTemplate Module'
            PRODUCT_NAME: 'IOTemplate Module'
            #MODULE_ARTIFACT_PATH: ./module-definition/functions/io2-module-elo**.dll

        steps:
            - name: Log output
              run: |
                  echo "Setting up workflow for ${{ github.ref_name }}"

    version:
        name: 'Determine Version'
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/determine-version.yml@main
        needs: [settings]
        with:
            branch: ${{ github.ref_name }}
            default_version: ${{ inputs.release }}

    # build-windows-ui-elements:
    #     name: 'Build UI Elements for Windows'
    #     needs: [version]
    #     uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-dotnet-desktop-app.yml@main
    #     with:
    #         use-cache: true
    #         sln-file: src/desktop-plugins/io2-module-template-desktop-plugins.sln
    #         artifact-name: BuildUiElements
    #         artifact-files: |
    #             ./module-definition/functions/io2-module-template**.dll
    #     secrets:
    #         action-user: ${{ secrets.GH_ACTION_USER }}
    #         action-token: ${{ secrets.GH_ACTION_TOKEN }}
    #         awdev-nuget-source: ${{ secrets.AWDEV_NUGET_URL }}

    build-ui:
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-ui-io-module.yml@main
        needs: [settings, version]
        with:
            repository: ${{ github.repository }}
            branch: ${{ github.ref_name }}
        secrets:
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            awdev-nuget-source: ${{ secrets.AWDEV_NUGET_URL }}
            npm-package-token: ${{ secrets.AWDEV_NPM_PACKAGE_TOKEN }}
            npmrc-config: ${{ secrets.NPMRC_CONFIG }}

    build-container:
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-dotnet-io-module.yml@main
        needs: [settings, version, build-ui]
        with:
            repository: ${{ github.repository }}
            branch: ${{ github.ref_name }}
            dotnet-version: ${{ needs.settings.outputs.DOTNET_VERSION }}
            project: ${{ needs.settings.outputs.PROJECT_FILE }}
            modulefile: ${{ needs.settings.outputs.MODULE_FILE }}
            dockerfile: ${{ needs.settings.outputs.DOCKER_FILE }}
            # module-artifact-path: ${{ needs.settings.outputs.MODULE_ARTIFACT_PATH}}
            ui-build-path: ${{ needs.settings.outputs.UI_BUILD_PATH }}
            ui-build-cache-key: ${{ needs.build-ui.outputs.cache-key }}
            ui-build-cache-path: ${{ needs.build-ui.outputs.cache-path }}
            rid: 'linux-x64'
            create-single-file: false
            use-cache: true
        secrets:
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            awdev-nuget-source: ${{ secrets.AWDEV_NUGET_URL }}
            npm-package-token: ${{ secrets.AWDEV_NPM_PACKAGE_TOKEN }}
            npmrc-config: ${{ secrets.NPMRC_CONFIG }}

    docker-latest:
        needs: [settings, version, build-container]

        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/publish-to-docker.yml@main
        with:
            artifact: ${{ needs.build-container.outputs.download }}
            image-name: ${{ needs.settings.outputs.DOCKER_IMAGE }}
            image-tag: 2-latest,${{ needs.settings.outputs.DOCKER_IMAGE }}:${{ needs.version.outputs.version }}
            remove-tags: prerelease-${{ needs.version.outputs.version }}
            force-remove: true
            use-cache: true
            cache-path: ${{ needs.build-container.outputs.cache-path }}
        secrets:
            docker-username: ${{ secrets.DOCKER_HUB_USER }}
            docker-password: ${{ secrets.DOCKER_HUB_SECRET }}

    clean-up-cache:
        needs: [version, build-container, docker-latest]
        runs-on: ubuntu-latest

        steps:
            - name: Cleanup
              run: |
                  gh extension install actions/gh-actions-cache

                  REPO=${{ github.repository }}
                  BRANCH="${{ github.ref_name }}"

                  echo "Fetching list of cache key"
                  cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

                  ## Setting this to not fail the workflow while deleting cache keys. 
                  set +e
                  echo "Deleting caches..."
                  for cacheKey in $cacheKeysForPR
                  do
                      gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
                  done
                  echo "Done"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
