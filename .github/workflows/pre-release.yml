name: 'Pre-Release and Hotfix Build (Auto)'

on:
    push:
        branches:
            - 'prerelease/*'
            - 'hotfix/*'
    workflow_dispatch:
        inputs:
            release:
                description: 'The default release version'
                required: false
                type: string
                default: ''
            release_type:
                description: 'The release type'
                required: false
                default: 'prerelease/'
                type: choice
                options:
                    - 'prerelease/'
                    - 'hotfix/'

jobs:
    settings:
        name: 'Prepare Workflow'
        runs-on: ubuntu-latest

        outputs:
            DOTNET_VERSION: 8.0.x
            PROJECT_FILE: src/service-v2-dotnet/service/io2-module-iotemplate-service.csproj
            UI_BUILD_PATH: ./src/configuration/build
            MODULE_FILE: IOTemplate.zip
            DOCKER_FILE: ./.github/docker/dockerfile
            DOCKER_IMAGE: actiwareio/io-upload-center
            SETUP_PROJECT: src/setup/setup-module-dotnet.aip
            SERVICE_NAME: IOTemplateService
            S3_TARGET: 'Modules/IOTemplate Module'
            PRODUCT_NAME: 'IOTemplate Module'

        steps:
            - name: Log output
              run: |
                  echo "Setting up workflow for ${{ github.ref_name }}"

    version:
        name: 'Determine Version'
        needs: [settings]
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/determine-version.yml@main
        with:
            branch: ${{ github.ref_name }}
            default_version: ${{ inputs.release }}
            type: ${{ inputs.release_type }}

    build-ui:
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-ui-io-module.yml@main
        needs: [settings, version]
        with:
            repository: ${{ github.repository }}
            branch: ${{ github.ref_name }}
        secrets:
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            awdev-nuget-source: ${{ secrets.AWDEV_NUGET_URL }}
            npm-package-token: ${{ secrets.AWDEV_NPM_PACKAGE_TOKEN }}
            npmrc-config: ${{ secrets.NPMRC_CONFIG }}

    build-container:
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-dotnet-io-module.yml@main
        needs: [settings, version, build-ui]
        with:
            artifact-name: BuildOutputLinux
            version-postfix: '-pre-release'
            repository: ${{ github.repository }}
            branch: ${{ github.ref_name }}
            dotnet-version: ${{ needs.settings.outputs.DOTNET_VERSION }}
            project: ${{ needs.settings.outputs.PROJECT_FILE }}
            modulefile: ${{ needs.settings.outputs.MODULE_FILE }}
            dockerfile: ${{ needs.settings.outputs.DOCKER_FILE }}
            ui-build-path: ${{ needs.settings.outputs.UI_BUILD_PATH }}
            ui-build-cache-key: ${{ needs.build-ui.outputs.cache-key }}
            ui-build-cache-path: ${{ needs.build-ui.outputs.cache-path }}
            rid: 'linux-x64'
            create-single-file: false
            use-cache: true
        secrets:
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            awdev-nuget-source: ${{ secrets.AWDEV_NUGET_URL }}
            npm-package-token: ${{ secrets.AWDEV_NPM_PACKAGE_TOKEN }}
            npmrc-config: ${{ secrets.NPMRC_CONFIG }}

    build-windows:
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-dotnet-io-module.yml@main
        needs: [settings, version, build-ui]
        with:
            artifact-name: BuildOutputWindows
            version-postfix: ${{ needs.version.outputs.setup-tag }}
            repository: ${{ github.repository }}
            branch: ${{ github.ref_name }}
            dotnet-version: ${{ needs.settings.outputs.DOTNET_VERSION }}
            project: ${{ needs.settings.outputs.PROJECT_FILE }}
            modulefile: ${{ needs.settings.outputs.MODULE_FILE }}
            dockerfile: ${{ needs.settings.outputs.DOCKER_FILE }}
            ui-build-path: ${{ needs.settings.outputs.UI_BUILD_PATH }}
            ui-build-cache-key: ${{ needs.build-ui.outputs.cache-key }}
            ui-build-cache-path: ${{ needs.build-ui.outputs.cache-path }}
            module-aip-setup: ${{ needs.settings.outputs.SETUP_PROJECT }}
            rid: 'win-x64'
            create-single-file: true
            use-cache: true
        secrets:
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            awdev-nuget-source: ${{ secrets.AWDEV_NUGET_URL }}
            npm-package-token: ${{ secrets.AWDEV_NPM_PACKAGE_TOKEN }}
            npmrc-config: ${{ secrets.NPMRC_CONFIG }}

    docker:
        needs: [settings, version, build-container]

        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/publish-to-docker.yml@main
        with:
            artifact: ${{ needs.build-container.outputs.download }}
            image-name: actiwareio/io-module-iotemplate
            image-tag: ${{ needs.version.outputs.docker-tag }}-${{ needs.version.outputs.version }}
            use-cache: true
            cache-path: ${{ needs.build-container.outputs.cache-path }}
        secrets:
            docker-username: ${{ secrets.DOCKER_HUB_USER }}
            docker-password: ${{ secrets.DOCKER_HUB_SECRET }}

    build-setup-for-io:
        needs: [settings, version, build-windows]
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-advanced-installer-setups.yml@main
        with:
            artifact: ${{ needs.build-windows.outputs.download }}
            cache-path: ${{ needs.build-windows.outputs.cache-path }}
            artifact-setup: IoSetup
            aip-file: ${{ needs.settings.outputs.SETUP_PROJECT }}
            major-version: 2
            minor-version: 0
            patch-level: ${{ needs.version.outputs.patch-level }}
            build-version: ${{ needs.version.outputs.version }}
            service-name: 'Io${{ needs.settings.outputs.SERVICE_NAME }}'
            setup-name: 'IO - ${{ needs.settings.outputs.PRODUCT_NAME }}'
            setup-name-postfix: ' - ${{ needs.version.outputs.setup-tag }}'
            s3-bucket: 'io-setups'
            publish-target: '2.x/${{ needs.settings.outputs.S3_TARGET }}'
            manufacture: 'ACTIWARE Development GmbH'
            partner: 'ACTIWARE'
            branding: 'IO'
            sign-external: false
            use-cache: true
        secrets:
            aip-license: ${{ secrets.ADVANCED_INSTALLER_LICENSE_KEY }}
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            aws-access-key: ${{ secrets.AWS_SETUP_ACCESS_KEY }}
            aws-secret-key: ${{ secrets.AWS_SETUP_SECRET_KEY }}
            certificate-file: ${{ secrets.ADVANCED_INSTALLER_SIGN_PFX }}
            certificate-pwd: ${{ secrets.ADVANCED_INSTALLER_SIGN_PFX_PWD }}

    build-setup-for-blp:
        needs: [settings, version, build-windows]
        uses: actiwaredevelopment/action-io-build-workflows/.github/workflows/build-advanced-installer-setups.yml@main
        with:
            artifact: ${{ needs.build-windows.outputs.download }}
            cache-path: ${{ needs.build-windows.outputs.cache-path }}
            artifact-setup: BlpSetup
            aip-file: ${{ needs.settings.outputs.SETUP_PROJECT }}
            major-version: 6
            minor-version: 0
            patch-level: ${{ needs.version.outputs.patch-level }}
            build-version: ${{ needs.version.outputs.version }}
            service-name: 'Blp${{ needs.settings.outputs.SERVICE_NAME }}'
            setup-name: 'Business Logic Provider - ${{ needs.settings.outputs.PRODUCT_NAME }}'
            setup-name-postfix: ' - ${{ needs.version.outputs.setup-tag }}'
            s3-bucket: 'blp-setups'
            publish-target: '6.x/${{ needs.settings.outputs.S3_TARGET }}'
            manufacture: 'ELO Digital Office GmbH'
            partner: 'ELO'
            branding: 'Business Logic Provider'
            sign-external: false
            use-cache: true
        secrets:
            aip-license: ${{ secrets.ADVANCED_INSTALLER_LICENSE_KEY }}
            action-user: ${{ secrets.GH_ACTION_USER }}
            action-token: ${{ secrets.GH_ACTION_TOKEN }}
            aws-access-key: ${{ secrets.AWS_SETUP_ACCESS_KEY }}
            aws-secret-key: ${{ secrets.AWS_SETUP_SECRET_KEY }}
            certificate-file: ${{ secrets.ADVANCED_INSTALLER_SIGN_PFX }}
            certificate-pwd: ${{ secrets.ADVANCED_INSTALLER_SIGN_PFX_PWD }}

    clean-up-cache:
        needs: [build-setup-for-io, build-setup-for-blp, docker]
        runs-on: ubuntu-latest

        steps:
            - name: Cleanup
              run: |
                  gh extension install actions/gh-actions-cache

                  REPO=${{ github.repository }}
                  BRANCH="${{ github.ref_name }}"

                  echo "Fetching list of cache key"
                  cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

                  ## Setting this to not fail the workflow while deleting cache keys. 
                  set +e
                  echo "Deleting caches..."
                  for cacheKey in $cacheKeysForPR
                  do
                      gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
                  done
                  echo "Done"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    send-mail-to-qa:
        needs:
            [build-setup-for-io, build-setup-for-blp, docker, version, settings]
        runs-on: ubuntu-latest

        steps:
            - name: Send Mail to QA
              uses: actiwaredevelopment/action-send-grid-mail@v0.1
              with:
                  TOKEN: ${{ secrets.SEND_GRID_TOKEN }}
                  TEMPLATE_ID: 'd-ec4fb5e968ff4e6992b604f265e8492f'
                  SENDER_MAIL: 'development@actiware-development.com'
                  SEND_TO: ${{ secrets.SEND_GRID_QA_MAILS }}
                  TEMPLATE_DATA: setup=${{ needs.settings.outputs.PRODUCT_NAME }};version=${{ needs.version.outputs.version }}.${{ needs.version.outputs.build-version }}
